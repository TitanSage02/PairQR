name: Deploy Backend

on:
  push:
    branches: [ main ]
    paths:
      - 'server/**'
      - 'shared/**'
      - 'scripts/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: deploy-backend-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy to Droplet (production)
    environment: production
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      SSH_HOST: ${{ secrets.DO_HOST }}
      SSH_USER: ${{ secrets.DO_SSH_USER }}
      SSH_KEY:  ${{ secrets.DO_SSH_KEY }}
      SSH_PORT: ${{ secrets.DO_SSH_PORT || '22' }}
      PROJECT_DIR: ${{ secrets.PROJECT_DIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Validate required secrets
        shell: bash
        run: |
          set -eo pipefail   # <= pas de -u ici
          missing=0

          check() {
            # $1=valeur du secret, $2=nom lisible
            # astuce: ${val:+x} vaut "x" si val non vide, sinon vide -> sans déclencher nounset
            local val="$1" name="$2"
            if [ -z "${val:+x}" ]; then
              printf '❌ Missing secret: %s\n' "$name"
              missing=1
            else
              printf '✅ Found: %s\n' "$name"
            fi
          }

          check "${{ secrets.DO_HOST }}"              DO_HOST
          check "${{ secrets.DO_SSH_USER }}"          DO_SSH_USER
          check "${{ secrets.DO_SSH_KEY }}"           DO_SSH_KEY
          check "${{ secrets.PROJECT_DIR }}"          PROJECT_DIR

          check "${{ secrets.ADMIN_PASSWORD }}"       ADMIN_PASSWORD
          check "${{ secrets.HMAC_SECRET }}"          HMAC_SECRET
          check "${{ secrets.JWT_SECRET }}"           JWT_SECRET
          check "${{ secrets.CORS_ORIGIN }}"          CORS_ORIGIN
          check "${{ secrets.TURN_STATIC_SECRET }}"   TURN_STATIC_SECRET

          if [ "$missing" -ne 0 ]; then
            echo "One or more required secrets are missing. Add them in Settings » Secrets and variables » Actions." >&2
            exit 1
          fi

      - name: Inspect files to upload
        run: |
          set -euxo pipefail
          shopt -s globstar nullglob dotglob
          files=( ./server/** ./shared/** ./scripts/** )
          printf 'Matched files:\n'; printf ' - %s\n' "${files[@]}"
          (( ${#files[@]} )) || { echo "No files matched. Check paths or add files."; exit 1; }

      - name: Copy server files to Droplet
        uses: appleboy/scp-action@v1
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          port: ${{ env.SSH_PORT }}
          source: "./server/**,./shared/**,./scripts/**"
          target: ${{ env.PROJECT_DIR }}/
          overwrite: true
          strip_components: 0
          timeout: 30s
          command_timeout: 10m

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1
        env:
          # Transmises à la session distante via `with.envs`
          PROJECT_DIR: ${{ secrets.PROJECT_DIR }}
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          port: ${{ env.SSH_PORT }}
          envs: PROJECT_DIR
          script: |
            set -euo pipefail

            PROJECT_DIR="${PROJECT_DIR:-${{ secrets.PROJECT_DIR }}}"

            # Outils de base
            if ! command -v curl >/dev/null 2>&1; then
              sudo apt-get update -y && sudo apt-get install -y curl
            fi
            if ! command -v ufw >/dev/null 2>&1; then
              sudo apt-get update -y && sudo apt-get install -y ufw || true
            fi

            # Docker
            if ! command -v docker >/dev/null 2>&1; then
              curl -fsSL https://get.docker.com | sh
            fi
            sudo systemctl enable --now docker || true

            # Pare-feu (optionnel)
            if command -v ufw >/dev/null 2>&1; then
              sudo ufw allow 80/tcp || true
              sudo ufw allow 3478/tcp || true
              sudo ufw allow 3478/udp || true
            fi

            # Préparer le dossier projet
            mkdir -p "$PROJECT_DIR/server"
            cd "$PROJECT_DIR"

            # Générer le .env pour docker compose
            cat > server/.env << 'EOF'
            NODE_ENV=production
            PORT=3000
            ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
            HMAC_SECRET=${{ secrets.HMAC_SECRET }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
            RATE_LIMIT_WINDOW_MS=60000
            RATE_LIMIT_MAX=100
            REDIS_TTL_SECONDS=300
            TURN_STATIC_SECRET=${{ secrets.TURN_STATIC_SECRET }}
            TURN_REALM=pairqr
            EOF

            # Choisir la commande compose
            COMPOSE="docker compose"
            if ! docker compose version >/dev/null 2>&1; then COMPOSE="docker-compose"; fi

            # Down
            sudo $COMPOSE --env-file server/.env -f server/docker-compose.yml down

            # Build & run
            sudo $COMPOSE --env-file server/.env -f server/docker-compose.yml up -d --build

            # Healthcheck
            HOST="api.pairqr.app"
            URL="https://${HOST}/health"
            ok=0
            for i in $(seq 1 30); do
              code=$(curl -fsS -o /dev/null -w "%{http_code}" -L \
                --connect-timeout 3 --retry 2 \
                --resolve "${HOST}:443:127.0.0.1" "$URL" || true)
              if [ "$code" = "200" ]; then
                echo "✅ Service healthy (HTTP 200)."
                ok=1; break
              fi
              echo "⏳ Waiting for service... ($i/30) code=${code:-N/A}"
              sleep 2
            done
            [ "$ok" -eq 1 ] || { echo "❌ Healthcheck failed"; exit 1; }

            set -e
            if [ "${ok:-0}" -ne 1 ]; then
              echo "⚠️ Health check failed. Recent logs:"
              sudo $COMPOSE -f server/docker-compose.yml ps
              sudo $COMPOSE -f server/docker-compose.yml logs --tail=200 || true
              exit 1
            fi

            # Nettoyage léger des caches
            sudo docker system prune -af --filter "until=24h" || true
