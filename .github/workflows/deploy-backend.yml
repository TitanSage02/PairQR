name: Deploy Backend

on:
  push:
    branches: [ main ]
    paths:
      - 'server/**'
      - 'shared/**'
      - 'scripts/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: deploy-backend-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  deploy:
    name: Deploy to Droplet (production)
    environment: production
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      SSH_HOST: ${{ secrets.DO_HOST }}
      SSH_USER: ${{ secrets.DO_SSH_USER }}
      SSH_KEY:  ${{ secrets.DO_SSH_KEY }}
      SSH_PORT: ${{ secrets.DO_SSH_PORT || '22' }}
      PROJECT_DIR: ${{ secrets.PROJECT_DIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Validate required secrets
        run: |
          set -euo pipefail
          missing=0
          req=(
            SSH_HOST SSH_USER SSH_KEY PROJECT_DIR
            ADMIN_PASSWORD HMAC_SECRET JWT_SECRET
            CORS_ORIGIN TURN_STATIC_SECRET
          )
          for k in "${req[@]}"; do
            if [ -z "${!k:-}" ]; then
              echo "❌ Missing secret: $k"
              missing=1
            else
              echo "✅ Found: $k"
            fi
          done
          if [ "$missing" -eq 1 ]; then
            echo "One or more required secrets are missing. Add them in Settings » Secrets and variables » Actions." >&2
            exit 1
          fi

      - name: Copy server files to Droplet
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          port: ${{ env.SSH_PORT }}
          source: |
            server/**
            shared/**
            scripts/**
          target: ${{ env.PROJECT_DIR }}/
          strip_components: 0
          overwrite: true

          # Keep transfers lean
          exclude: |
            **/.git/**
            **/.github/**
            **/node_modules/**
            **/dist/**
            **/.next/**
            **/.turbo/**
            **/.vercel/**
            **/.cache/**

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          port: ${{ env.SSH_PORT }}
          script_stop: true
          script: |
            set -euo pipefail

            PROJECT_DIR="${PROJECT_DIR}"

            # Always have curl & ufw available for later steps
            if ! command -v curl >/dev/null 2>&1; then
              sudo apt-get update -y && sudo apt-get install -y curl
            fi
            if ! command -v ufw >/dev/null 2>&1; then
              sudo apt-get update -y && sudo apt-get install -y ufw || true
            fi

            # Ensure Docker is installed and running
            if ! command -v docker >/dev/null 2>&1; then
              curl -fsSL https://get.docker.com | sh
            fi
            sudo systemctl enable --now docker || true

            # Optional firewall rules
            if command -v ufw >/dev/null 2>&1; then
              sudo ufw allow 3000/tcp || true
              sudo ufw allow 3478/tcp || true
              sudo ufw allow 3478/udp || true
            fi
            
            # Choose compose command
            COMPOSE="docker compose"
            if ! docker compose version >/dev/null 2>&1; then
              COMPOSE="docker-compose"
            fi

            # Build & start
            sudo $COMPOSE --env-file .env -f docker-compose.yml up -d --build

            # Health check: wait up to ~60s for HTTP 200 on /health (adjust as needed)
            set +e
            for i in $(seq 1 20); do
              status=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:3000/health || true)
              if [ "$status" = "200" ]; then
                echo "✅ Service healthy (HTTP 200)."
                ok=1
                break
              fi
              echo "⏳ Waiting for service... ($i/20) Last status: ${status:-N/A}"
              sleep 3
            done
            set -e

            if [ "${ok:-0}" -ne 1 ]; then
              echo "⚠️ Health check failed. Recent logs:"
              sudo $COMPOSE -f docker-compose.yml ps
              sudo $COMPOSE -f docker-compose.yml logs --tail=200 || true
              exit 1
            fi

            # Prune dangling build cache older than 24h (keeps useful cache)
            sudo docker system prune -af --filter "until=24h" || true
